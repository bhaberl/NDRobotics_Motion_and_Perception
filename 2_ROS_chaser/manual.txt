


I. Publishers

Publishers allow a node to send messages to a topic:

Define:
ros::Publisher pub1 = n.advertise<message_type>("/topic_name", queue_size);

- pub1 object allows to publish messages by publish() 

- NodeHandle n to communicate with ROS master 

- advertise() to inform ROS that you want to publish a message on a topic 

- message_type e.g. std_msgs::String or std_msgs::Float64

Call:
pub1.publish(msg);


SourceCode Example Node:

gedit simple_mover.cpp

#include "ros/ros.h"
#include "std_msgs/Float64.h"

int main(int argc, char** argv)
{
    // Initialize the arm_mover node
    ros::init(argc, argv, "arm_mover");

    // Create a handle to the arm_mover node, which permits it to communicate with the ROS Master
    ros::NodeHandle n;

    // Create a publisher that can publish a std_msgs::Float64 message on the /simple_arm/joint_1_position_controller/command topic
    ros::Publisher joint1_pub = n.advertise<std_msgs::Float64>("/simple_arm/joint_1_position_controller/command", 10);
    // Create a publisher that can publish a std_msgs::Float64 message on the /simple_arm/joint_2_position_controller/command topic
    ros::Publisher joint2_pub = n.advertise<std_msgs::Float64>("/simple_arm/joint_2_position_controller/command", 10);

    // Set loop frequency of 10Hz
    ros::Rate loop_rate(10);

    int start_time, elapsed;

    // Get ROS start time
    while (not start_time) {
        start_time = ros::Time::now().toSec();
    }

    while (ros::ok()) {
        // Get ROS elapsed time
        elapsed = ros::Time::now().toSec() - start_time;

        // Set the arm joint angles
        std_msgs::Float64 joint1_angle, joint2_angle;
        joint1_angle.data = sin(2 * M_PI * 0.1 * elapsed) * (M_PI / 2);
        joint2_angle.data = sin(2 * M_PI * 0.1 * elapsed) * (M_PI / 2);

        // Publish the arm joint angles
        joint1_pub.publish(joint1_angle);
        joint2_pub.publish(joint2_angle);

        // Sleep for the time remaining until 10 Hz is reached
        loop_rate.sleep();
    }

    return 0;
}


Source it via CMakeLists.txt

find_package(catkin REQUIRED COMPONENTS
        std_msgs
        message_generation
        controller_manager
)

include_directories(include ${catkin_INCLUDE_DIRS})

add_executable(simple_mover src/simple_mover.cpp)
target_link_libraries(simple_mover ${catkin_LIBRARIES})
add_dependencies(simple_mover simple_arm_generate_messages_cpp)


II. Services:

A service allows request/response communication between nodes.

Define:
ros::ServiceServer service = n.advertiseService(`service_name`, handler);

- node handle n allows to communicate with ROS 

- advertiseService() informs ROS that you want to create a service

- handler is the name of the function that handles the incoming service message

Call:
Services can be called directly from the command line, with:

$ rosservice call service_name “request”

Or by the ServiseClient, provides interface for sending messages to the service:

ros::ServiceClient client = n.serviceClient<package_name::service_file_name>("service_name");

client.call(srv);

Definitions of request/response messages are contained within .srv files.


















