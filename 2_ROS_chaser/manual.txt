


I. Publishers

Publishers allow a node to send messages to a topic:

Define:
ros::Publisher pub1 = n.advertise<message_type>("/topic_name", queue_size);

- pub1 object allows to publish messages by publish() 

- NodeHandle n to communicate with ROS master 

- advertise() to inform ROS that you want to publish a message on a topic 

- message_type e.g. std_msgs::String or std_msgs::Float64

Call:
pub1.publish(msg);


gedit simple_mover.cpp

Source it via CMakeLists.txt

find_package(catkin REQUIRED COMPONENTS
        std_msgs
        message_generation
        controller_manager
)

include_directories(include ${catkin_INCLUDE_DIRS})

add_executable(simple_mover src/simple_mover.cpp)
target_link_libraries(simple_mover ${catkin_LIBRARIES})
add_dependencies(simple_mover simple_arm_generate_messages_cpp)


II. Services:

A service allows request/response communication between nodes.

Define:
ros::ServiceServer service = n.advertiseService(`service_name`, handler);

- node handle n allows to communicate with ROS 

- advertiseService() informs ROS that you want to create a service

- handler is the name of the function that handles the incoming service message

Call:
Services can be called directly from the command line, with:

$ rosservice call service_name “request”

Or by the ServiseClient, provides interface for sending messages to the service:

ros::ServiceClient client = n.serviceClient<package_name::service_file_name>("service_name");

client.call(srv);

Definitions of request/response messages are contained within .srv files.

gedit GoToPosition.srv

//request message
float64 joint_1
float64 joint_2
---
//response message
string msg_feedback

Source via CMakeLists

add_service_files(
   FILES
   GoToPosition.srv
)
generate_messages(
   DEPENDENCIES
   std_msgs  # Or other packages containing msgs
)
add_compile_options(-std=c++11)

package.xml defines package’s properties, such as package-name, version numbers, authors and dependencies(rosdep)

<buildtool_depend>catkin</buildtool_depend>
  <build_depend>message_generation</build_depend>

  <run_depend>controller_manager</run_depend>
  <run_depend>effort_controllers</run_depend>
  <run_depend>gazebo_plugins</run_depend>
  <run_depend>gazebo_ros</run_depend>
  <run_depend>gazebo_ros_control</run_depend>
  <run_depend>joint_state_controller</run_depend>
  <run_depend>joint_state_publisher</run_depend>
  <run_depend>robot_state_publisher</run_depend>
  <run_depend>message_runtime</run_depend>
  <run_depend>xacro</run_depend>
  
  Verify if ROS can see srv:
  rossrv show GoToPosition
  
  gedit arm_mover.cpp

  







